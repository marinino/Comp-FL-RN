Introduction

Introduction to mobile computing 

With the rise of mobile devices in our every day mobile development became one of the most important topics in the whole IT landscape. There are just under 7 billion smartphones being used worldwide at the moment. With this the fast and easy distribution of mobile applications is important not only for the private user but also for many companies. This thesis tries to work out the differences and with that the advantages and disadvantages of the two most popular frameworks to build mobile application, at least for one of the two major approaches when it comes to the development of mobile application, which will be further discussed and described a bit later on. First the groundwork, the systems on which the applications run, will be set. There are the two major operating systems for mobile phones one the market, which everybody knows, the Apple IOS and the Android operating system. The third known plattform from Windows, will be disregarded here as relevancy of these phones is not worth taking them into an account. The peek of the Windows phones in the UK was in 2015 with around 3 percent, which is low as it is, but in the past years this number even declined to now at around 0.03 percent. So there is no real benefit to invest time and resources to investigate such a little amount of the market. The more intersting look here is actually the distribution between Android and IOS systems. Obviously we need to take into account here that these numbers are ever evolving and change pretty fast as the whole market is fluent and changes very fast. In the fourth quater of 2023 Android is dominating the market at 69 percent with Apple being at around 23 percent. But to these numbers there a very intersting nuonces, like for example for the american market Apple controls the market at around 57 percent with Android being at around 14 percent. Android is dominating countries where the wide population may not be as wealthy, countries like Brazil, Turkey and India for example. Looking at the numbers over the years Apple maintained their global market shares at around 20 to 25 percent, while Android grew from around 10 to around 75 percent from 2010 to 2018. Since 2018 the dynamic has changed though with Andoid regressing and Apple gaining ever so slightly, to make the numbers as they are described above. Mobile applications also play a big with more recent developments like for example smart watches but as this is kind of a niche and there are completly different requirements for these applications this will also not be regarded here, although this could be something which can be very interseting and may grow in importance over the next decade or so.

Native mobile development refers to the process of developing software applications that run directly on the hardware of mobile devices such as smartphones and tablets. This means in development one can use programming languages and tools that are specifically designed for the particular operating system targeted by the developer. These languages include Java or Kotlin for Android, and Swift or Objective-C for iOS. By focusing on a single platform, developers can take full advantage of all the features and hardware capabilities of the devices running that operating system. In the early 2010s most of the applications were written in Objective-C for iOS and in Java for the Android operating systems. The developers really focused on their environemnt creating a clear division between Android development and iOS development. In 2014 Apple introduced Swift for iOS development, creating an alternative to Objective-C, with Google doing the same in 2017 with Kotlin creating an alternative to Java. With these new language the focus shifted to different aspects of the mobile development, starting to focus on augemented reality and machine learning for mobile applications. The biggest positive of this approach is that applications offer the best performance in theory as they are best-suited for the environment they a run in. This also improves user experience as interfaces are usually more intuitive and fluid with native appraoches. In addition full feature access is also guaranteed, which may be essential in some use cases. The problem is there are plenty of disadvantages with the native approach, the most glaring one being the fact that the application is only usable on one of the two main operating systems or there must be a lot of time invested into building two completly independent applications for both plattforms. In addition it necessary two either have two development teams or one team where people can develop both native Android and iOS applications. The last big downside is maintaining of the applications as all of this must be done twice too. All in all it can be said, that it was appealing to have everything only being need to be done once for one application on multiple operating systems instead of doing everything twice.

With that the idea of cross plattform development came up. Cross-platform mobile development refers to the process of building software applications that are compatible with multiple mobile operating systems (OS) from a single codebase. This approach allows developers to write the code once and deploy it across various platforms, most commonly iOS and Android, without needing to rewrite the app in the native programming languages of each platform. The core technologies used in cross-platform development include frameworks like React Native, Flutter, Xamarin, and Cordova, each offering different methodologies and advantages. Cordova was one of the first tools enabling cross-plattform development by running a web app, so a standard HTML, CSS, Javascript application, in a native container, allowing web applications to access some device features. React Native, developed by Facebook, allowed the developers to render Native components for the first time, marking a significant milestone in the evolution of cross plattform development. Flutter did not take same approach but rather drew UI elements directly not using native components, which made it more customizable and performant. The advantages are basically fixing the disadvanages of the native approach, it is much more effective, especially when it comes to cost and time. Plus it adds uniformity for applications, which is helpful under the viewpoint of brand identification. Plus resources can be managed more efficiently, teams can be smaller, and no plattform specialists for the operating systems are needed. But of course there are disadvantages to this approach which should not go unmentioned here in order to keep a neutral stance. The performance of the cross plattform approaches, while having increased over the last few years, is still lacking in comaprison to the native approach. Especially graphic intense tasks or tasks with a lot of hardware interaction may still be challenging for the cross plattform approach. There may be some limitations from the plattfroms directly, for example device-specific features or latest OS updates can be delayed or limited, as well as creating a native look and feel for the applications. The last potential downside is the possible dependence on the third party platform, because if a framework limits something the development team wants to do there is sometimes no way around these limitations, which would probably not accur with a native approach.
In gerneral though it can be said, that the line between native and cross plattform approaches continued to blurr to a certain extend over the last couple of years, with the performance of cross plattform frameworks increasing and them closing in on native experiences. And with a growing community for these cross platform approaches, libraries, plugins and tools evolved to a degree where they solve a lot of the issues accuring during the rise of these approaches and enhance the capabilites which the applications developed by corss platform approaches can have.

A little word on the background of the developer of the applications implemented and tested in this thesis, which may impact the final verdict and especially could impact the subjective categories and the experiences, later described, during the coding proccess. There is very minimal in native Android development, but quite a substancial amount of experience in Javascript and Typescript, which will make the adjust to Raect Native a little easier. There is no pervious knowledge in dart, there is experience in Java though, so the aclimatization should not be too difficult. There is no experience in the frameworks we look at in this thesis, neither Flutter nor React Native.

Technical intro to React Native

Looking into the technical side of React Native a little bit, we start with the language the frameworks uses. The framework uses both JavaScript and React for building its mobile applications. Obviously with TypScript popping up, nowadays most people would use TypeScript and when projects are created, they are created in TypeScript by default aswell. Anyway the building blocks of React Native are the TypeScript/JavaScript language along side React. The idea and the trait which made React Native very powerful over the last couple of years is the combination of the benefits of native performance and functionalities along with the speed of JavaScript. React Native uses a bridge system enabling the JavaScript code to interact with the native components and code. So you can also say it bridges the gap between JavaScript and the native languages (Objective-C, Swift, Java, Kotlin). The framework uses React's states and props in order to improve the state management of the application as well as introducting component-based architectures from React. It also provides the hot and live reload feature and was one of the earliest to do so. There is a small but important difference between hot reloading and live reloading. Hot reloading modifies the changed components but keeps the application state stable, live reloading on the other hand refreshes the whole application as soon as there are changes in the code. In short you can say, hot reloading keeps the state, live reloading does not. But what both have in common is that is drastically improves the productivity of the developer as visual feedback on the altered code is provided very fast. The things which seperates React Native the most and especially from the other framework looked at in this thesis, Flutter, is the fact that it uses native components for UI rendering. This has the advantage of creating a native look and feel for the application as well as the native performance coming with these components. In addition React Native uses a JavaScript thread to run its logic, which is very performant. As already teasered, React Native was the first major framework to be able to compine the speed and flexibility of JavaScript with the performance and the user experience of the native approach, which was instrumental to the early success of the framework. Above, when discussing the downsides of cross platform frameworks, there was the mention of some functionalities not being usable in these frameworks. React Native introduced a Native Module system that allows developers to write code in the native language, when it needs to access something, which can not be reached otherwise. So this increased the overall flexibility of how application can be developed with a combination of native and cross platform approaches. Something which react Native is well known for is the community it has and the community friven approach it uses to provide with a plethera of libraries and tool to improve the development proccess. The last point mentioned here will be the Expo integration, which plays an important role in this very thesis too. With Expo project setup is very quick and easy and the biggest benefit of all is that it allows deployment of the application on Android as well as on iOS from any device. This is very helpful if there is only a Windows computer or a MacBook available for development, because usually both is needed to build iOS and Andriod apps, but Expo mitigates this need. React Native was the first framework to bridge the gap between web and mobile development can be seen as some kind of a start to the whole development over the last ten years. This also applies to Flutter as it certainly paived the way for this framework too, although Flutter is pretty different to React Native.

Taking a more detailed look into Flutter, the first thing jumping out is that with the language Dart we go in a different direction compared to React Native with JavaScript. The advantage of Dart it is very good at building UIs and offers a reactive programming model. As is Flutter, Dart is created by Google, the language is dedicated to the Flutter framework and was developed for this from the very start. Therefore the traits for the language will be reflected throughout the framework, focusing on fast application start up times and smooth and easy animations. With DART JIT(Just in time) compilation we also have hot reload in this framework for the development phase. In the prdocution mode, Dart automatically changes to AOT(Ahead of time) compilationwhich ensures that the application is performant. The heart and sole of the Flutter framework are Widgets, which can be seen like building blocks for the UI, like a Lego build, everything in Flutter is build out of widgets. These widgets are very customizable though, so the developer can create a native look and feel, but in comparison to React Native, they are not actual native components. In order to satisfy both platforms there are widget libraries for both iOS and Android. Flutter also chooses a completly different approach when it comes to rendering UI components, it does not use the bridge React native uses. Instead it draws the components itself, bypassing the need for native components. Flutter also uses a seperate Flutter engine, using Google's Skia graphics library to make sure the rendering capabilities are maintained at all times. Just like in React Native, through that engine, Flutter has access to the device hardware. Like React Native Flutter also has hot reloading. Flutter strides to be very customizable and extensible, developers have a lot of design freedom and a lot of opportunities to change the given widgets. With that users can create a very distinguished and personal lokk and feel but, this obviously takes away from the native look and feel. Something which can be very important is the fact that Flutter offers more control over the displayed content up to the degree where the developer could control every pixel individually. While Flutter is not the only framework relying on widgets it is the only one where it is so integral to the whole structure, which also hepls with reactivity. Something which is completly unique to Flutter is the direct trendering onto the canvas via the before mentioned graphics engine. The last unique feature for Flutter is the before mentioned languague used, Dart. It is actually the only cross platform framework using the language, which provides the already mentioned benefits, but natrually has some downsides to it. One of these was especially relevant in the past, as the community was not as big, which has changed over the last few years though. As we have discussed the community driven approach for React Native, this is also a difference in Flutter, where tool and library development is done more in house, so to speak. All in all it can be said that, just as React Native, Flutter provided a further shift in the development of cross platform development especially when it comes to unique design solutions and individual looks and feels.