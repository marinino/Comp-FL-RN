There are servel different approaches to comparing App development frameworks. The biggest difference can made between native and cross plattform approaches. So there are studies comparing the performance of native approaches with the performance of cross plattform approaches and studies comparing cross plattform approaches with each other, just like this one. As we focus on the cross plattform approaches only papers which include that are considered. There are some papers which do both in one study, they are also included here, but the focus is then set on the comparison between Flutter an React Native. There are also some papers which include other cross plattform approaches like Xamarian or Iconic but again, like for the other papers, the focus is on the comparison between Flutter and React Native. 

In A_Comparative_Study_of_Cross_platform_Mobile_Application_Development_P68 one application was implemented. The app was a money transfer which was pretty simple. There are two clients and they can exchange their money via a QR-Code. They found that Flutter uses less lines of code in comparison to React Native. In addition to that Flutter used less memory and less CPU compared to React Native. In the Paper they state that Flutter is more user friendly but that is based on the IDE the apps where developed in, which could just be altered or could be seen completly different by another user. The study also only tests very little functionality, so the spectrum of features and components is not really well represented. In addition to that they also only tested one Android version and no IOS version at all.

In A comparison of Native and Cross-Platform Frameworks for Mobile Applications there is one test application, which is basically an app in which you can insert fitness results. So the focus very clearly is on I/O here. They gathered the data in the Android Studio Profiler with a via USB connected mobile device. The measured code size for the complex app in React Native for Android was roughly five times as big as the Flutter implementation. For IOS the applications were around three times as big in React Native, compared to their counterpart in  Flutter. The measured start up times for the applications were pretty similar as was the RAM usage, eventhough Flutter always used a tiny bit more RAM than React Native. For CPU usage Flutter may a have a little lower peaks and is overall a bit more efficient but there is not a clear cut better framework here. The issue with the results here are, that measurements were not taken at certain events but at different timesstamps, so interpretation is kind of difficult. 

In Analyzing_the_Performance_of_Apps_Developed_by_using_Cross_platform_and_Native_Technologies a database cycle was tested, so HTTP request times, render times for adding items into lists, time saving that item to the local database and times retrieving an item from the datatbase. The checked IOS and Android for Android there were next to no differences between Flutter and React Native, for IOS React Native may have a very slight edge, but nothing major. But again we only have a limited number of features implemented, which is for nearly everything here the case, as it is just not feasable to test many things and costs and time would just explode. The bigger issue with this study is that measurements were only taken every five seconds to limit the amount of the data produced, but that obviously also takes away from the representativity of the study.

In Analyzing_the_Resource_Usage_Overhead_of_Mobile_App_Development_Frameworks two applications were implemented. There was a contact app and a second app which can rotate a fixed amount of pictures. The results of the study were that in high load React Native is way more energy efficient but uses more memory. For animations, scrolling, side menus, screen switching and inserting records into databases Flutter was found to produce a lot less overhead and therefore performing much better. 

